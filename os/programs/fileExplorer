---@diagnostic disable: unused-local
local scrw, scrh = term.getSize()
term.setCursorPos(1, 1)
term.clear()

local redBoxX, redBoxY = 2, 7
local redBoxW, redBoxH = scrw - (redBoxX * 2) + 2, scrh - 7

local greenBoxX, greenBoxY = 2, 2
local greenBoxW, greenBoxH = scrw - (greenBoxX * 2) + 2, 5

local selectedIndex = 1
local selected
local history = {}

local function outLine(win, x, y, w, h, color)
    win.setBackgroundColor(color)
    win.setTextColor(colors.white)
    win.setCursorPos(x, y)
    win.write(string.rep(" ", w))
    win.setCursorPos(x, y + h - 1)
    win.write(string.rep(" ", w))
    for i = y + 1, y + h - 2 do
        win.setCursorPos(x, i)
        win.write(" ")
        win.setCursorPos(x + w - 1, i)
        win.write(" ")
    end
end

local function fillOutline(win, x, y, w, h, color)
    x, y = x + 1, y + 1
    w, h = w - 2, h - 2
    win.setBackgroundColor(color)
    for i = y, y + h - 1 do
        win.setCursorPos(x, i)
        win.write(string.rep(" ", w))
    end
end

local function drawChar(win, x, y, char)
    for i = 1, #char do
        for j = 1, #char[i] do
            win.setCursorPos(x + j - 1, y + i - 1)
            win.write(char[i][j])
        end
    end
end


local function drawTime(win)
    local w, h = win.getSize()
    local spaceBetween = (w - 16) - 15

    local hour, minute, ampm = cosUtils.getTime("12", true)
    local time = hour .. ":" .. minute .. " " .. ampm

    fillOutline(win, 15, 1, spaceBetween + 3, 5, colors.brown)
    win.setCursorPos(w / 2 - string.len(time) / 2.5, 3)
    win.write(time)
    win.setCursorPos(15, 15)
end

local function drawChoices(win, col1, col2)
    col1 = col1 or colors.yellow
    col2 = col2 or col1
    local w, _ = win.getSize()
    local chars = {
        c = { { "\x7f", "\x7f", "\x7f" }, { "\x7f", "", "\x7f" }, { "\x7f", "\x7f", "\x7f" } },
        o = { { "\x7f", "\x7f", "\x7f" }, { "\x7f", "", "" }, { "\x7f", "\x7f", "\x7f" } },
        i = { { "\x7f", "\x7f", "\x7f" }, { "", "\x7f", "" }, { "\x7f", "\x7f", "\x7f" } }
    }

    win.setBackgroundColor(col1)
    drawChar(win, 3, 2, chars.c)
    drawChar(win, 7, 2, chars.o)
    drawChar(win, 11, 2, chars.i)

    win.setBackgroundColor(col2)
    drawChar(win, w - 4, 2, chars.i)
    drawChar(win, w - 8, 2, chars.c)
    drawChar(win, w - 12, 2, chars.c)

    -- Draw a yellow line, to the right of COI
    win.setBackgroundColor(colors.yellow)
    win.setCursorPos(15, 2)
    win.write(" ")
    win.setCursorPos(15, 3)
    win.write(" ")
    win.setCursorPos(15, 4)
    win.write(" ")

    win.setCursorPos(w - 14, 2)
    win.write(" ")
    win.setCursorPos(w - 14, 3)
    win.write(" ")
    win.setCursorPos(w - 14, 4)
    win.write(" ")

    drawTime(win)
end

local redBox = window.create(term.current(), redBoxX, redBoxY, redBoxW, redBoxH, false)
local greenBox = window.create(term.current(), greenBoxX, greenBoxY, greenBoxW, greenBoxH, false)

local function drawBoxes(col1, col2)
    col1 = col1 or colors.yellow
    col2 = col2 or col1

    outLine(redBox, 1, 1, redBoxW, redBoxH, colors.red)
    outLine(greenBox, 1, 1, greenBoxW, greenBoxH, colors.green)

    fillOutline(redBox, 1, 1, redBoxW, redBoxH, colors.gray)
    fillOutline(greenBox, 1, 1, greenBoxW, greenBoxH, colors.gray)

    drawChoices(greenBox, col1, col2)
end

local function listFiles(dir)
    local files = fs.list(dir)
    local dirs, filess = {}, {}

    for i = 1, #files do
        local path = fs.combine(dir, files[i])
        if fs.isDir(path) then
            if not string.find(path, "rom") then
                table.insert(dirs, files[i])
            end
        else
            if not string.find(path, "rom") then
                table.insert(filess, files[i])
            end
        end
    end

    table.sort(dirs)
    table.sort(filess)

    return dirs, filess
end

local function displayFiles(dir)
    redBox.clear()
    local dirs, files = listFiles(dir)

    for i = 1, #dirs do
        redBox.setCursorPos(2, 1 + i)
        local path = dirs[i]
        redBox.setBackgroundColor(colors.gray)

        if i == selectedIndex then
            redBox.setTextColor(colors.lightBlue)
            redBox.write("> " .. path)
            selected = path
        else
            redBox.setTextColor(colors.white)
            redBox.write(path)
        end
    end

    for i = 1, #files do
        redBox.setCursorPos(2, 1 + i + #dirs)
        local path = files[i]
        redBox.setBackgroundColor(colors.gray)

        if i + #dirs == selectedIndex then
            redBox.setTextColor(colors.lightBlue)
            redBox.write("> " .. path)
            selected = path
        else
            redBox.setTextColor(colors.green)
            redBox.write(path)
        end
    end

    -- Draw a yellow line, directly in the middle
    redBox.setBackgroundColor(colors.yellow)

    for i = 1, redBoxH do
        redBox.setCursorPos(redBoxW / 2, i)
        redBox.write(" ")
    end

    -- if fs.isDir(selected) then
    local attributes = fs.attributes2(selected, true)
    local size = attributes.size
    local lastModified = attributes.modified
    local readOnly = attributes.readonly

    redBox.setBackgroundColor(colors.gray)
    redBox.setTextColor(colors.white)
    redBox.setCursorPos(redBoxW / 2 + 2, 2)
    redBox.write("Size: " .. size)
    redBox.setCursorPos(redBoxW / 2 + 2, 3)
    redBox.write("Modified: " .. lastModified)
    redBox.setCursorPos(redBoxW / 2 + 2, 4)
    redBox.write("Created: " .. attributes.created)
    redBox.setCursorPos(redBoxW / 2 + 2, 5)
    redBox.write("Read Only: " .. (readOnly and "Yes" or "No"))
    -- else
    --     redBox.setBackgroundColor(colors.gray)
    --     redBox.setCursorPos(redBoxW / 2 + 2, 2)
    --     redBox.write("Size: " .. fs.getSize(selected))
    --     redBox.setCursorPos(redBoxW / 2 + 2, 3)
    --     redBox.write("Last Modified: " .. fs.getLastModified(selected))
    -- end
end


local function navigateTo(dir)
    shell.setDir("/", false)
    table.insert(history, dir)
    selectedIndex = 1
    shell.setDir( dir, false)
    displayFiles(dir)
end

local function goBack()
    if #history > 1 then
        table.remove(history)
        local previousDir = history[#history]
        selectedIndex = 1
        shell.setDir("../", false)
        displayFiles(previousDir)
    end
end

local function main()
    drawBoxes()
    redBox.setVisible(true)
    greenBox.setVisible(true)
    local timerID = os.startTimer(15)

    local starting = "/"
    table.insert(history, starting)

    displayFiles(starting)

    while true do
        local Event, Key = os.pullEvent()

        if Event == "timer" and Key == timerID then
            drawTime(greenBox)
            timerID = os.startTimer(5)
        elseif Event == "key" then
            if Key == keys.up then
                selectedIndex = selectedIndex > 1 and selectedIndex - 1 or 1
                displayFiles(history[#history])
            elseif Key == keys.down then
                local _, files = listFiles(history[#history])
                local totalFiles = #files + #listFiles(history[#history])
                selectedIndex = selectedIndex < totalFiles and selectedIndex + 1 or totalFiles
                displayFiles(history[#history])
            elseif Key == keys.enter then
                local path = fs.combine(history[#history], selected)

                if fs.isDir(path) then
                    navigateTo(path)
                else
                    shell.run("edit " .. selected)
                    break
                end
            elseif Key == keys.backspace then
                goBack()
            elseif Key == keys.f6 then
                shell.run("cd /")
                term.clear()
                term.setCursorPos(1, 1)
                break
            end
        end
    end
end

main()
